# -*- coding: utf-8 -*-
"""Advanced Programming in Finance_Gated Recurrant Units.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i9FEgJLQUh5OKyO3P05E3raOUzqVogK7

# Library
"""

import numpy as np
import pandas as pd

import math

import io, os, sys

from google.colab import drive
drive.mount('/content/gdrive/')

import time
import datetime
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

from keras.layers.core import Dense, Dropout
from keras.layers.recurrent import GRU
from keras.models import Sequential, load_model

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler

from sklearn.metrics import mean_squared_error
from sklearn.metrics import accuracy_score

"""# Data

## Import Data
"""

def parser(x):
    return datetime.datetime.strptime(x,'%Y-%m-%d')

my_path = "/content/gdrive/My Drive/Advance Programming in Finance/"
data_path = os.path.join(my_path, 'GS.csv')

dataset = pd.read_csv(data_path, header = 0, parse_dates = [0], date_parser = parser, index_col = ['Date'])
dataset.head()

input_data = dataset.iloc[:, 0:4]
input_data.head()

# preparing label data

input_shift = input_data.shift(-1)
label_data = input_shift['Close']
label_data.head()

# adjusting the shape of both

input_data.drop(input_data.index[len(input_data) - 1], axis = 0, inplace = True)
label_data.drop(label_data.index[len(label_data) - 1], axis = 0, inplace = True)

input_data.head()

x, y = input_data.values, label_data.values

# scaling values for model

x_scale = MinMaxScaler()
y_scale = MinMaxScaler()

X = x_scale.fit_transform(x)
Y = y_scale.fit_transform(y.reshape(-1, 1))

# splitting train and test

test_size = 0.3

X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = test_size)
X_train = X_train.reshape((-1,1,4))
X_test = X_test.reshape((-1,1,4))

"""# Model Gated Recurrant Units"""

# creating model using Keras

model_name = 'stock_price_GRU'

model = Sequential()
model.add(GRU(units=512,
              return_sequences=True,
              input_shape=(1, 4)))
model.add(Dropout(0.2))
model.add(GRU(units=256))
model.add(Dropout(0.2))
model.add(Dense(1, activation='sigmoid'))
model.compile(loss='mse', optimizer='adam')

model.fit(X_train,y_train,batch_size=250, epochs=500, validation_split=0.1, verbose=1)
model.save("{}.h5".format(model_name))
print('MODEL-SAVED')

"""# Visualize"""

score = model.evaluate(X_test, y_test)
print('Score: {}'.format(score))
yhat = model.predict(X_test)
yhat = y_scale.inverse_transform(yhat)
y_test = y_scale.inverse_transform(y_test)
plt.plot(yhat[-100:], label='Predicted')
plt.plot(y_test[-100:], label='Ground Truth')
plt.legend()
plt.show()